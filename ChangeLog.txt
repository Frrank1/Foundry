This file contains the change log for the Cognitive Foundry.

Changes since last release:

Release 3.3.0 (2011-06-22):
  * Common Core:
    * Added LogMath and LogNumber as utilities for computation involving numbers
      represented in log-space.
    * Added MutableInteger and MutableLong, which are like Integer and Long but
      with a mutable value, similar to MutableDouble.
    * UnivariateSummaryStatistics added.
    * Added DefaultIndentifiedValue.
  * Learning Core:
    * VectorNaiveBayesCategorizer: evaluateWithDiscriminant now properly
      normalizes the discriminant, which improves results for things like AUC.
    * PartitionalClusterer: Fixed corner-case bug.
    * Added confidence-weighted online learners based on variance, standard
      deviation, and AROW. They produce ConfidenceWeightedBinaryCategorizer
      objects with either diagonal or full covariance matrices.
    * Added balanced versions of bagging and IVoting in
      CategoryBalancedBaggingLearner and CategoryBalancedIVotingLearner.
    * Added online learners based on ROMMA, AROMMA, Ballseptron, Ramp-loss 
      Passive Aggressive Perceptron, Shifting Perceptron, Forgetron,
      Projectron, Randomized Budget Perceptron, and Stoptron.
    * Added KernelizableBinaryCategorizerOnlineLearner interface for an online
      linear binary categorizer that can also be used with a kernel. Also
      provided abstract class AbstractKernelizableBinaryCategorizerOnlineLearner
      and AbstractLinearCombinationOnlineLearner for common functionality.
    * Moved KernelPerceptron and KernelAdatron to the new
      learning.perceptron.kernel package.
    * Added KernelUtil utility class for dealing with kernels and kernel
      binary categorizers.
    * Refactored statistics to remove getMean() from Distribution due to
      some distributions not having a meaningful mean and confusion for what
      the mean meant in some classes.
    * Classes and interfaces interfaces named *Scalar* renamed to *Univariate*
      for clarity.
    * Added getTestStatistic() method to ConfidenceStatistic interface and
      implemented in existing classes.
    * Added support for multiple comparisons tests, including Bonferroni,
      Holm, Nemenyi, Shaffer, Sidak, and Tukey-Kramer and updated
      AnalysisOfVarianceOneWay (ANOVA) and FriedmanConfidence.
    * Added multiple-comparisons experiment classes BlockExperimentComparison
      and MultipleComparisonExperiment
   * Text Core:
     * Renamed ProbabilisticLatentSemanticAnalysis.Transform to
       ProbabilisticLatentSemanticAnalysis.Result for consistency.

Release 3.2.0 (2011-05-19):
 * Upgraded to mtj-9.9.14 and added the netlib-java-0.9.3 library, which MTJ
   now depends on.
 * Common Core:
   * ParallelUtil: Added executeInParallel(tasks, algorithm)
   * CollectionUtil: Added removeElement.
   * Added MutableDouble class, which is like Double but with a mutable value.
     It also implements Ring and Vectorizable.
   * UnivariateStatisticsUtil: Improved stability of computeMean with large
     values.
   * VectorReader: Changed to use a Collection of tokens instead of requiring
     an ArrayList.
   * AbstractSingularValueDecomposition: Fixed a bug for certain types of
     rectangular matrices.
   * DiagonalMatrixMTJ: Made inverse faster.
   * ArgumentChecker: Added assertIsInRangeExclusive and fixed a formatting
     issue with some exception messages.
   * Added Identified interface.
 * Learning Core:
   * Added BatchAndIncrementalLearner interface, which is for algorithms that
     can be used in batch and incremental modes. Note that it defines that the
     BatchLearner interface uses a Collection of data for consistency with
     existing batch (non-incremental) algorithms. However, it does also include
     another learn method that takes an Iterable.
     AbstractBatchAndIncrementalLearner now implements it.
   * Added SupervisedIncrementalLearner interface, supervised version,
     SupervisedBatchAndIncrementalLearner, and abstract class
     AbstractSupervisedBatchAndIncrementalLearner. Many incremental learning
     algorithms now implement these interfaces and extend this abstract class.
   * VectorNaiveBayesCategorizer: Now has generic for the distribution type
     representing each feature, including OnlingBaggingCategorizerLearner,
     AbstractOnlineLinearBinaryCategorizerLearner,
     OnlinePassiveAggressivePerceptron, OnlinePerceptron, OnlineVotedPerceptron,
     and Winnow.
   * BaggingCategorizerLearner: Added a protected fillBag method, which
     can be overridden to implement a different sampling approach.
   * Added BatchMultiPerceptron, which is an implementation of a multi-class
     Perceptron that keeps one Perceptron per class.
   * Added MultiCategoryAdaBoost, which is an implementation of the AdaBoost.M1
     algorithm.
   * DecisionTree: Added findTerminalNode methods.
   * CrossFoldCreator: Added constructor that takes just a number of folds.
   * KernelBinaryCategorizer is now an interface with a default implementation
     in DefaultKernelBinaryCategorizer. KernelPerceptron, KernelAdatron,
     SequentialMinimalOptimization, and SuccessiveOverrelaxation now all
     use the new interface or default class.
   * Added LinearMultiCategorizer class, which keeps a LinearBinaryCategorizer
     for each class and
   * Removed GeneralizedScalarRadialBasisKernel class.
   * GaussianContextRecognizer: Now requires MixtureOfGaussians.PDF.
   * DefaultConfusionMatrix: Added copy constructor.
   * DiscreteDistribution: Added getDomainSize and implemented in subclasses.
   * DiscreteSamplingUtil: Added sampleWithReplacementInto method.
   * ProbabilityMassFunctionUtil: Added sampleMultiple and sampleSingle.
   * ScalarProbabilityDensityFunction: Added logEvaluate method and implemented
     in subclasses.
   * BayesianLinearRegression: Added incremental learner.
   * BayesianRobustLinearRegression: Added incremental learner.
   * Refactored LinearMixtureModel, MixtureOfGaussians, and
     ScalarMixtureDensityModel to be more consistent with other Foundry
     statistics classes.
   * MultivariateGaussian: Added incremental estimator.
   * Added MultivariateMixtureDensityModel class.
   * UnivaraiteGaussian: Added incremental estimator.
   * Added FriedmanConfidence, NemenyiConfidence, and TukeyRangeConfidence,
     which implement methods for computing confidence intervals.
 * Text Core:
   * LatentSemanticAnalysis: Added better handling of low-rank matrices.


Release 3.1.1 (2011-03-23):
 * All projects now depend on JUnit 4.8.2 instead of 3.8.2 or 4.6.
 * Upgraded to XStream to 1.3.1 (and its dependency xpp3_min to 1.1.4c).
 * Common Core:
   * KDTree: Fixed two bugs that caused the KDTree to not always return the
     nearest points in rare cases.
 * Learning Core:
   * PartitionalClusterer: Added an implementation of a partitional clustering
     algorithm.
   * IncrementalClusterCreator: New interface for a cluster creator that can
     incrementally update clusters. DefaultIncrementalClusterCreator is a
     default implementation of the interface that just updates the cluster
     memberships.
   * VectorMeanCentroidClusterCreator: Modified to implement the new
     IncrementalClusterCreator interface.
   * BinaryBaggingLearner: Generalized generics in constructor.
   * OnlineBaggingCategorizerLearner: Added an implementation of an online
     version of the bagging algorithm for building ensembles.
   * VotingCategorizerEnsemble: Added an unweighted voting categorization
     ensemble as a counterpart to WeightedVotingCategorizerEnsemble.
   * OnlinePassiveAggressivePerceptron: Added an implementation of the
     Passive-Aggressive algorithm for binary classification. Also contains
     PA-I (LinearSoftMargin) and PA-II (QuadraticSoftMargin) variants.

Release 3.1.0 (2011-02-23):

 * Text: New package in this release for doing statistical text analysis and
   information retrieval. Especially useful for doing machine learning over
   text data.
 * Common Core:
   * CollectionUtil: Added toStringDelimited method.
   * VectorFactoryContainer is now an interface, existing implementation moved
     to DefaultVectorFactoryContainer.
   * ObjectUtil: Added getBytes method.
 * Learning Core:
   * OnlineLearner interface renamed to IncrementalLearner, which is a more
     appropriate name. Other similar classes also renamed:
     AbstractBatchAndIncrementalLearner
   * Added BatchLearnerContainer interface and renamed
     AbstractBatchLearnerWrapper to AbstractBatchLearnerContainer
   * Added DiscriminantCategorizer and BinaryDiscriminantCategorizer interfaces.
     Almost all Categorizers now implement one of these interfaces; some
     existing methods were renamed to match these standard interfaces.
   * Added DistanceSamplingClusterInitializer, which is an implementation of
     the k-means++ initialization algorithm.
   * HiddenMarkovModel and BaumWelchAlgorithm had some performance improvements.
   * Added KernelPrincipalComponentsAnalysis, which is an implementation of
     kernel PCA using eigen-decomposition.
   * DatasetUtil: Added countOutputValues.
   * TargetEstimatePair and WeightedTargetEstimatePair are now interfaces;
     existing implementations moved to DefaultTargetEstimatePair and
     DefaultWeightedTargetEstimatePair.
   * ConstantEvaluator: Now extends AbstractCloneableSerializable.
   * ThresholdBinaryCategorizer is now an interface. Existing implementation
     moved to ScalarThresholdBinaryCategorizer.
   * AbstractThresholdBinaryCategorizer now longer contains the threshold
     directly, instead it assumes the threshold is applied in evaluateAsDouble
     and categorizes based on zero. This is to remove the confusion of having
     both a bias and a threshold in some classes and to clarify the meaning of
     evaluateAsDouble so that it matches the new BinaryDiscriminantCategorizer
     interface.
   * DataHistogram: Added isEmpty method and implemented in
     AbstractDataHistogram.
   * Made new ConfusionMatrix and BinaryConfusionMatrix interfaces and put them
     in the gov.sandia.cognition.learning.performance.categorization. Refactored
     existing confusion matrix code to implement these interfaces; the existing
     class ending up in DefaultBinaryConfusionMatrix. New confusion matrix
     interface uses generics to be useful for more than just binary
     categorization.
   * Now uses JUnit 4.6 for tests.

Release 3.0.3 (2010-12-22):
* Common Core:
  * UnivariateStatisticsUtil: Weighted computations handle negative weights by
    using absolute values to fix bug.

Release 3.0.2 (2010-12-15):
* Common Core:
  * ValueMapper: Added create() method.
  * UnivariateStatisticsUtil: Addressed numerical instability in one-pass
    variance calculations.
  * DefaultNamedValue: Added create() methods.
  * Added ArgumentChecker utility class.
  * Added KeyValuePair interface and DefaultKeyValuePair implementation.
* Learning Core:
  * AdaBoost: Generalized generics.
  * BaggingCategorizerLearner: Will create a new Random if null.
  * WeightedBinaryEnsemble: Added generic for the member type.
  * IVotingCategorizerLearner: Performance improvements, added vote histogram
    factory.
  * HiddenMarkovModel: Made computeObservationsLikelihoods public.
  * ParallelHiddenMarkovModel: Added copy constructor.
  * Added online perceptron and voted perceptron implementations.
  * Added primal estimated sub-gradient SVM learner.
  * AbstractDecisionTreeLearner: Performance tweaks.
  * AbstractDecisionTreeNode: Added parent field.
  * AbstractVectorThresholdMaximumGainLearner: Fixed corner-case bug.
  * CategorizationTreeLearner: Added maximum depth parameter and cleaned up
    implementation.
  * CategorizationTreeNode: Support of parent field.
  * DecisionTreeNode: Added getParent(), getDepth(), and getTreeSize() methods.
  * RegressionTreeLearner: Added maximum depth parameter.
  * RegressionTreeNode: Support of parent field.
  * DatasetUtil: Added splitOnOutput method.
  * ConstantEvaluator: Added create method.
  * LinearBinaryCategorizer: Now allows null weight vector (evaluates to 0.0).
  * VectorElementThresholdCategorizer: Added toString().
  * AbstractDataHistogram: Now contains default implementations of getFraction()
    and addAll().
  * DataHistogram: Minor refactoring to be more consistent with other
    statistics distributions. In particular, getDomain() is to be used instead
    of getValues(), which was removed. Moved many of the methods that were in
    the implementation class into the interface.
  * DiscreteSamplingUtil: New utility class for sampling discrete objects.
  * ScalarSummaryStatistics: Bug fix.
  * MapBasedDataHistogram: Reworked with changes to DataHistogram. New PMF,
    learner, and factory implementations.
  * UnivariateGaussian: Learner classes generic updated to be a
    UnivariateGaussian.PDF, which it was already returning.
  * Added YuleSimonDistribution distribution class.
  * KolmogorovSmirnovConfidence: Fixed infinite loop with given NaNs.

Release 3.0.1 (2010-10-15):
* Common Core:
  * Added ArrayUtil class.
  * MultivariateStatisticsUtil: computeMean changed to accept Iterable instead
    of Collection.
  * Permutation: Added reorder method.
* Learning Core:
  * DirichletProcessClustering: Performance improvements.
  * Cluster: Made CloneableSerializable.
  * DefaultCluster: Now extends AbstractCloneableSerializable.
  * AbstractClusterHierarchyNode:: Now extends AbstractCloneableSerializable.
  * gov.sandia.cognition.learning.function.cost: Added AbstractCostFunction,
    KolmogorovSmirnocDivergence, NegativeLogLikelihood, and
    ParallelNegativeLogLikelihood.
  * SequantialMinimalOptimization: Added an initial implementatio of the
    algorithm.
  * WeightedEuclideanDistance: Added a weighted Euclidean distance metric.
  * Added EstimableDistribution interface.
  * AbstractMarkovChainMonteCarlo: Now keeps track of previous parameter.
  * DirichletProcessMixtureModel: Performance improvements.
  * ParallelDirichletProcessMixtureModel: Performance improvements.
  * MultivariateGaussianMeanBayesianEstimator: Update now optimized for case of
    a list instead of a single update.
  * MultivariateGaussianMeanCovarianceBayesianEstimator: Optimizations for case
    of providing a list of data.
  * BetaBinomialDistribution: Now implements EstimableDistribution.
  * BetaDistribution: Now implements EstimableDistribution.
  * ChineseRestaurantProcess: Now keeps track of total customers.
  * ExponentialDistribution: Now implements EstimableDistribution.
  * GammaDistribution: Now implements EstimableDistribution.
  * GeometricDistribution: Now implements EstimableDistribution.
  * LaplaceDistribution: Now implements EstimableDistribution.
  * MultinomialDistribution: Added logSize method.
  * MultivariateGaussian: Now implements EstimableDistribution.
  * NegativeBinomialDistribution: Now implements EstimableDistribution.
  * NormalInverseWishartDistribution: Now implements EstimableDistribution.
  * PoissonDistribution: Now implements EstimableDistribution.
  * ScalarDataDistribution: getDomain now returns in sorted order.
  * StudentTDistribution: Now implements EstimableDistribution.
  * UniformDistribution: Now implements EstimableDistribution.
  * UnivariateGaussian: Now implements EstimableDistribution.
  * ConfidenceIntervalEvaluator: Added computeConfidenceInterval method that
    takes a mean, variance, number of samples, and confidence. All existing
    ConfidenceIntervalEvaluators updated; which mostly meant changing static
    methods to be member methods and adding INSTANCE variables for those without
    parameters.
  * ChebyshevInequality: Now extends AbstractCloneableSerializable.

Release 3.0.0 (2010-06-25):
First open source release.
